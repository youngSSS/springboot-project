# 구글 로그인을 위한 application-aouth 등록

# Spring-boot는 properties의 이름을 application-xxx.properties로 만들면 xxx라는 이름의 profile이 생성되어 이를 통해 관리할 수 있다
# 즉, profile=xxx하는 식으로 호출하면 해당 properties의 설정들을 가져올 수 있다
# 호출하는 방식은 여러 방식이 있지만 해당 프로젝트에서는 Spring-boot의 기본 설정 파일인 application.properties에서 application-oauth.properties를 포함하도록 구성한다

spring.security.oauth2.client.registration.google.client-id=144032148668-nl0a3ivri6afsqkplh2s25vakn7ofsk5.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=aV1rAMG58DU5MpOn9LyiHXm5

# 보통 scope를 별도로 등록하지 않지만 scope를 강제로 profile,email로 등록한 이유는 scope의 기본값이 openid,profile,email이기 때문이다
# openid라는 scope가 있으면 OpenId Provider인 서비스(구글)와 그렇지 않은 서비스(네이버, 카카오 등)로 나눠서 각각 OAuth2Service를 만들어야 하기 때문
# 따라서 하나의 OAuth2Service로 사용하기 위해 일부러 openid scope를 빼고 등록
spring.security.oauth2.client.registration.google.scope=profile,email

